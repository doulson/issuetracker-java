A HashMap is a data structure that stores key-value pairs, providing efficient retrieval, insertion, and deletion operations. It is a part of the Java Collections Framework and is commonly used due to its speed and simplicity. Here's a basic explanation:

Key Features:
Key-Value Pairs: A HashMap stores data in pairs, where each key is unique. The key is used to retrieve the corresponding value.
Hashing: It uses a hashing algorithm to compute an index where each key-value pair should be stored. This reduces the lookup time significantly.
Efficient Operations: Average time complexity for get/put/remove operations is O(1) due to hashing.
No Order Guarantees: Unlike some collections like LinkedHashMap, a HashMap does not maintain any specific order of keys.
Null Keys and Values: Allows one null key and multiple null values.

In JavaScript and TypeScript, a similar data structure to Java's HashMap is the Map object. It also allows storing key-value pairs and provides efficient access methods.

import java.util.HashMap;

public class HashMapExample {
    public static void main(String[] args) {
        // Creating a HashMap to store student IDs and names
        HashMap<Integer, String> studentMap = new HashMap<>();

        // Adding key-value pairs to the HashMap
        studentMap.put(101, "Alice");
        studentMap.put(102, "Bob");
        studentMap.put(103, "Charlie");

        // Retrieving a value using a key
        String studentName = studentMap.get(101);
        System.out.println("Student with ID 101: " + studentName);

        // Checking if a key exists
        if (studentMap.containsKey(102)) {
            System.out.println("Student with ID 102 exists in the map.");
        }

        // Removing a key-value pair
        studentMap.remove(103);

        // Iterating over the keys and values
        for (Integer id : studentMap.keySet()) {
            System.out.println("ID: " + id + ", Name: " + studentMap.get(id));
        }
    }
}

