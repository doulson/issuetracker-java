Study Case : Vehicle Management System
    Problem: You want to manage different types of vehicles (cars, trucks, motorcycles) and perform common operations on them.
    Solution: Superclass Approach: Use a superclass Vehicle to define common attributes and methods.
    Other specific vehicle types can inherit from this class.

// Superclass
public class Vehicle {
    private String model;
    private String brand;

    public Vehicle(String model, String brand) {
        this.model = model;
        this.brand = brand;
    }

    public void start() {
        System.out.println("Starting vehicle: " + model);
    }

    public void stop() {
        System.out.println("Stopping vehicle: " + model);
    }
}

// Subclass Car
public class Car extends Vehicle {
    private int numberOfDoors;

    public Car(String model, String brand, int numberOfDoors) {
        super(model, brand);
        this.numberOfDoors = numberOfDoors;
    }

    public void honk() {
        System.out.println("Car horn goes 'Beep!'");
    }
}

// Subclass Motorcycle
public class Motorcycle extends Vehicle {
    private boolean hasSidecar;

    public Motorcycle(String model, String brand, boolean hasSidecar) {
        super(model, brand);
        this.hasSidecar = hasSidecar;
    }

    public void revEngine() {
        System.out.println("Motorcycle engine revs loudly!");
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car("Model S", "Tesla", 4);
        Motorcycle myBike = new Motorcycle("Ninja", "Kawasaki", false);

        myCar.start();     // Inherited start method from Vehicle
        myCar.honk();      // Specific to Car

        myBike.start();    // Inherited start method from Vehicle
        myBike.revEngine(); // Specific to Motorcycle
    }
}