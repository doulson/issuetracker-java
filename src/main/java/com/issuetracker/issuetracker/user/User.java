package com.issuetracker.issuetracker.user;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.issuetracker.issuetracker.role.Role;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.security.Principal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static jakarta.persistence.FetchType.EAGER;

@Getter // annotations from Lombok generate getter and setter methods for all fields in the class.
@Setter //and no arguments (NoArgsConstructor).
@SuperBuilder // annotation from Lombok generates a builder method for creating instances of the User class.
@AllArgsConstructor //These Lombok annotations generate constructors with all arguments (AllArgsConstructor)
@NoArgsConstructor
@Entity //annotation marks this class as a JPA entity, which means it will be mapped to a database table.
@Table(name = "_user") //annotation specifies the name of the database table to which this entity will be mapped.
@EntityListeners(AuditingEntityListener.class)
public class User implements UserDetails, Principal {

    @Id
    @GeneratedValue
    //annotation specifies that the value of the id field will be automatically generated by the persistence provider.
    private Integer id;

    private String firstName;

    private String lastName;

    private LocalDate DOB;

    @Column(unique = true) //ensures that the email column in the database will have a unique constraint.
    private String email;

    @JsonIgnore
    private String password;

    private boolean accountLocked;

    private boolean enabled;

    //EAGER fetching means that the associated entities will be loaded eagerly along with the owning entity.
    @ManyToMany(fetch = EAGER)
    private List<Role> roles;

    @CreatedDate
    @Column(nullable = false, updatable = false)
    private LocalDateTime CreatedDate;

    @LastModifiedDate
    @Column(insertable = false)
    private LocalDateTime LastModifiedDate;

    @Override
    public String getName() {
        return email;
    }

    // This method converts the roles assigned to the user into GrantedAuthority objects and returns them as a collection.
    // These authorities can then be used by Spring Security to perform access control and authorization checks within your application.
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        if (this.roles == null) {
            return Collections.emptyList();
        }

        return this.roles
                .stream()
                .map(r -> new SimpleGrantedAuthority(r.getName()))
                .collect(Collectors.toList());
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !accountLocked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    public String getFullName() {
        return firstName + " " + lastName;
    }
}
